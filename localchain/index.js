/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { existsSync, readFileSync } = require('fs')
const { join } = require('path')

const { platform, arch } = process

let nativeBinding = null
let localFileExisted = false
let loadError = null

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process').execSync('which ldd').toString().trim()
      return readFileSync(lddPath, 'utf8').includes('musl')
    } catch (e) {
      return true
    }
  } else {
    const { glibcVersionRuntime } = process.report.getReport().header
    return !glibcVersionRuntime
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        localFileExisted = existsSync(join(__dirname, 'localchain.android-arm64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.android-arm64.node')
          } else {
            nativeBinding = require('@ulixee/localchain-android-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm':
        localFileExisted = existsSync(join(__dirname, 'localchain.android-arm-eabi.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.android-arm-eabi.node')
          } else {
            nativeBinding = require('@ulixee/localchain-android-arm-eabi')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`)
    }
    break
  case 'win32':
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(
          join(__dirname, 'localchain.win32-x64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.win32-x64-msvc.node')
          } else {
            nativeBinding = require('@ulixee/localchain-win32-x64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'ia32':
        localFileExisted = existsSync(
          join(__dirname, 'localchain.win32-ia32-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.win32-ia32-msvc.node')
          } else {
            nativeBinding = require('@ulixee/localchain-win32-ia32-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'localchain.win32-arm64-msvc.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.win32-arm64-msvc.node')
          } else {
            nativeBinding = require('@ulixee/localchain-win32-arm64-msvc')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`)
    }
    break
  case 'darwin':
    localFileExisted = existsSync(join(__dirname, 'localchain.darwin-universal.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./localchain.darwin-universal.node')
      } else {
        nativeBinding = require('@ulixee/localchain-darwin-universal')
      }
      break
    } catch {}
    switch (arch) {
      case 'x64':
        localFileExisted = existsSync(join(__dirname, 'localchain.darwin-x64.node'))
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.darwin-x64.node')
          } else {
            nativeBinding = require('@ulixee/localchain-darwin-x64')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'arm64':
        localFileExisted = existsSync(
          join(__dirname, 'localchain.darwin-arm64.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.darwin-arm64.node')
          } else {
            nativeBinding = require('@ulixee/localchain-darwin-arm64')
          }
        } catch (e) {
          loadError = e
        }
        break
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`)
    }
    break
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`)
    }
    localFileExisted = existsSync(join(__dirname, 'localchain.freebsd-x64.node'))
    try {
      if (localFileExisted) {
        nativeBinding = require('./localchain.freebsd-x64.node')
      } else {
        nativeBinding = require('@ulixee/localchain-freebsd-x64')
      }
    } catch (e) {
      loadError = e
    }
    break
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'localchain.linux-x64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./localchain.linux-x64-musl.node')
            } else {
              nativeBinding = require('@ulixee/localchain-linux-x64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'localchain.linux-x64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./localchain.linux-x64-gnu.node')
            } else {
              nativeBinding = require('@ulixee/localchain-linux-x64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'localchain.linux-arm64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./localchain.linux-arm64-musl.node')
            } else {
              nativeBinding = require('@ulixee/localchain-linux-arm64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'localchain.linux-arm64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./localchain.linux-arm64-gnu.node')
            } else {
              nativeBinding = require('@ulixee/localchain-linux-arm64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      case 'arm':
        localFileExisted = existsSync(
          join(__dirname, 'localchain.linux-arm-gnueabihf.node')
        )
        try {
          if (localFileExisted) {
            nativeBinding = require('./localchain.linux-arm-gnueabihf.node')
          } else {
            nativeBinding = require('@ulixee/localchain-linux-arm-gnueabihf')
          }
        } catch (e) {
          loadError = e
        }
        break
      case 'riscv64':
        if (isMusl()) {
          localFileExisted = existsSync(
            join(__dirname, 'localchain.linux-riscv64-musl.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./localchain.linux-riscv64-musl.node')
            } else {
              nativeBinding = require('@ulixee/localchain-linux-riscv64-musl')
            }
          } catch (e) {
            loadError = e
          }
        } else {
          localFileExisted = existsSync(
            join(__dirname, 'localchain.linux-riscv64-gnu.node')
          )
          try {
            if (localFileExisted) {
              nativeBinding = require('./localchain.linux-riscv64-gnu.node')
            } else {
              nativeBinding = require('@ulixee/localchain-linux-riscv64-gnu')
            }
          } catch (e) {
            loadError = e
          }
        }
        break
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`)
    }
    break
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`)
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError
  }
  throw new Error(`Failed to load native binding`)
}

const { DataTLD, AccountType, LocalAccount, AccountStore, BalanceChangeBuilder, BalanceChange, BalanceChangeStatus, BalanceChangeStore, BalanceSync, BalanceSyncResult, DataDomainLease, DataDomainStore, Keystore, MainchainClient, NotarizationBuilder, NotarizationTracker, NotaryClients, NotaryClient, NotebookMeta, BalanceTipResult, Escrow, OpenEscrow, OpenEscrowsStore, CryptoScheme, runCli, NOTARIZATION_MAX_BALANCE_CHANGES, NOTARIZATION_MAX_DOMAINS, NOTARIZATION_MAX_BLOCK_VOTES, ESCROW_EXPIRATION_TICKS, ESCROW_CLAWBACK_TICKS, ESCROW_MINIMUM_SETTLEMENT, DATASTORE_MAX_VERSIONS, DATA_DOMAIN_MIN_NAME_LENGTH, DATA_DOMAIN_LEASE_COST, VERSION, ArgonFileType, OverviewStore, TransactionType, Transactions, Localchain, TickerRef } = nativeBinding

module.exports.DataTLD = DataTLD
module.exports.AccountType = AccountType
module.exports.LocalAccount = LocalAccount
module.exports.AccountStore = AccountStore
module.exports.BalanceChangeBuilder = BalanceChangeBuilder
module.exports.BalanceChange = BalanceChange
module.exports.BalanceChangeStatus = BalanceChangeStatus
module.exports.BalanceChangeStore = BalanceChangeStore
module.exports.BalanceSync = BalanceSync
module.exports.BalanceSyncResult = BalanceSyncResult
module.exports.DataDomainLease = DataDomainLease
module.exports.DataDomainStore = DataDomainStore
module.exports.Keystore = Keystore
module.exports.MainchainClient = MainchainClient
module.exports.NotarizationBuilder = NotarizationBuilder
module.exports.NotarizationTracker = NotarizationTracker
module.exports.NotaryClients = NotaryClients
module.exports.NotaryClient = NotaryClient
module.exports.NotebookMeta = NotebookMeta
module.exports.BalanceTipResult = BalanceTipResult
module.exports.Escrow = Escrow
module.exports.OpenEscrow = OpenEscrow
module.exports.OpenEscrowsStore = OpenEscrowsStore
module.exports.CryptoScheme = CryptoScheme
module.exports.runCli = runCli
module.exports.NOTARIZATION_MAX_BALANCE_CHANGES = NOTARIZATION_MAX_BALANCE_CHANGES
module.exports.NOTARIZATION_MAX_DOMAINS = NOTARIZATION_MAX_DOMAINS
module.exports.NOTARIZATION_MAX_BLOCK_VOTES = NOTARIZATION_MAX_BLOCK_VOTES
module.exports.ESCROW_EXPIRATION_TICKS = ESCROW_EXPIRATION_TICKS
module.exports.ESCROW_CLAWBACK_TICKS = ESCROW_CLAWBACK_TICKS
module.exports.ESCROW_MINIMUM_SETTLEMENT = ESCROW_MINIMUM_SETTLEMENT
module.exports.DATASTORE_MAX_VERSIONS = DATASTORE_MAX_VERSIONS
module.exports.DATA_DOMAIN_MIN_NAME_LENGTH = DATA_DOMAIN_MIN_NAME_LENGTH
module.exports.DATA_DOMAIN_LEASE_COST = DATA_DOMAIN_LEASE_COST
module.exports.VERSION = VERSION
module.exports.ArgonFileType = ArgonFileType
module.exports.OverviewStore = OverviewStore
module.exports.TransactionType = TransactionType
module.exports.Transactions = Transactions
module.exports.Localchain = Localchain
module.exports.TickerRef = TickerRef
