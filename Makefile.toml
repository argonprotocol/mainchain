[config]
default_to_workspace = false
skip_core_tasks = true
init_task = "prep"
end_task = "stat"

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"
SCCACHE_CACHE_SIZE = "20G"

[tasks.prep]
description = "Ensure all tools are installed"
script = [
    "sccache --show-stats || cargo binstall sccache@^0.7 --no-confirm || true",
    "sccache --start-server || true"
]

[tasks.lint]
description = "Run clippy"
command = "cargo"
args = ["clippy", "--workspace", "--fix", "--allow-dirty", "--", "-Dwarnings"]

[tasks.lint-check]
description = "Run clippy without fixing"
command = "cargo"
args = ["clippy", "--workspace", "--", "-Dwarnings"]

[tasks.fmt]
description = "Run rustfmt"
toolchain = "nightly"
command = "cargo"
args = ["fmt", "--all"]

[tasks.zepter]
description = "Run zepter"
command = "zepter"
args = ["run", "default"]
install_crate_args = ["--no-confirm"]

[tasks.zepter.install_crate]
crate_name = "zepter@0.15"
binary = "zepter"
test_arg = "--version"
install_command = "binstall"
force = false

[tasks.format]
description = "Run zepter and fmt"
dependencies = ["zepter", "fmt"]

[tasks.docker]
description = "Build docker image"
script = [
    "docker buildx build -t ghcr.io/argonprotocol/argon-miner:dev . -f dev.Dockerfile --target argon-node",
    "docker buildx build -t ghcr.io/argonprotocol/argon-notary:dev . -f dev.Dockerfile --target argon-notary",
]

[tasks.sqlx-setup]
description = "Run sqlx setup"
script = [
    "cd localchain && cargo sqlx database setup || true",
    "cd ..",
    "cd notary && cargo sqlx database setup || true",
]
install_crate_args = ["--no-confirm"]

[tasks.sqlx-setup.install_crate]
crate_name = "sqlx-cli@0.8.0"
binary = "sqlx"
test_arg = "--version"
install_command = "binstall"

[tasks.sqlx]
description = "Run sqlx prepare"
command = "cargo"
args = ["sqlx", "prepare", "--workspace", "--", "--profile=test"]
dependencies = ["sqlx-setup"]
install_crate_args = ["--no-confirm"]

[tasks.stat]
description = "Show sccache stats"
command = "sccache"
args = ["--show-stats"]

[tasks.testnet-spec]
description = "Generate testnet spec"
script = [
    "cargo run --release --bin argon-node -- build-spec --chain fresh-testnet --raw > ./node/src/chain_spec/testnet1.json"
]

[tasks.build]
description = "Compiles the project"
command = "cargo"
args = ["build", "--features", "simulated-prices"]
env = { "RUSTC_WRAPPER" = "sccache" }
dependencies = ["sqlx-setup"]

[tasks.build-node]
description = "Compiles the project"
command = "cargo"
args = ["build", "--bin", "argon-node"]
env = { "RUSTC_WRAPPER" = "sccache" }
dependencies = ["sqlx-setup"]


[tasks.build-node-release]
description = "Compiles the project as a release"
command = "cargo"
args = ["build", "--release", "--bin", "argon-node"]
env = { "RUSTC_WRAPPER" = "sccache" }
dependencies = ["sqlx-setup"]

[tasks.update-metadata]
description = "Update metadata"
script = "client/update.sh"
dependencies = ["build-node"]

[tasks.test]
description = "Run tests with cargo,"
command = "cargo"
args = ["test", "--lib", "--no-fail-fast", "${@}"]
dependencies = ["build"]
env = { "RUSTC_WRAPPER" = "sccache" }

[tasks.nextest]
description = "Run tests with nextest,"
command = "cargo"
args = ["nextest", "run"]
dependencies = ["build"]
env = { "RUSTC_WRAPPER" = "sccache" }
install_crate_args = ["--no-confirm"]

[tasks.nextest.install_crate]
crate_name = "cargo-nextest@0.9"
binary = "nextest"
test_arg = "--version"
install_command = "binstall"

[tasks.watch]
description = "Watch for changes and rebuild"
command = "cargo"
args = ["watch", "-x", "build"]
env = { "RUSTC_WRAPPER" = "sccache" }
install_crate_args = ["--no-confirm"]
dependencies = ["sqlx-setup"]

[tasks.watch.install_crate]
crate_name = "cargo-watch@7.8"
binary = "cargo-watch"
test_arg = "--version"
force = false
install_command = "binstall"

[tasks.release_new_testnet]
description = "Reset a new testnet"
dependencies = ["testnet-spec", "release"]

[tasks.release]
description = "Complete release process: install dependencies, version bump, changelogs, commit, and push"
script = [
    "brew install convco",
    "cargo binstall cargo-edit --no-confirm",
    "export VERSION=$(convco version --bump)",
    "export COMMIT_MSG=\"chore(release): update changelogs and bump versions to v${VERSION}\"",
    "echo $COMMIT_MSG",
    "cargo set-version ${VERSION}",
    "convco changelog --unreleased ${VERSION} > CHANGELOG.md",
    "convco changelog --paths localchain --unreleased ${VERSION} > localchain/CHANGELOG.md",
    "convco changelog --paths client/nodejs --unreleased ${VERSION} > client/nodejs/CHANGELOG.md",
    "yarn",
    "yarn version:bump",
    "yarn", # re-link workspaces
    "git add .",
    # if not already on a branch matching the version, create one
    "git checkout -b v${VERSION} || true",
    # commit a second time in case there pre-commit hooks that modify files
    "git commit -m \"$COMMIT_MSG\" || (git add . && git commit -m \"$COMMIT_MSG\")",
]
