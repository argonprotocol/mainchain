[package]
name = "argon-node-runtime"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
license.workspace = true
repository.workspace = true
documentation.workspace = true
homepage.workspace = true
publish = false

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[dependencies]
codec = { workspace = true }
scale-info = { workspace = true }
smallvec = { workspace = true }
log = { workspace = true }
serde_json = { workspace = true }

pallet-authorship = { workspace = true }
pallet-balances = { workspace = true }
pallet-multisig = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-session = { workspace = true }
pallet-grandpa = { workspace = true }
pallet-offences = { workspace = true }
pallet-proxy = { workspace = true }
pallet-tx-pause = { workspace = true }
pallet-transaction-payment = { workspace = true }
frame-support = { workspace = true, features = ["experimental"] }
frame-system = { workspace = true }
frame-try-runtime = { workspace = true, optional = true }
frame-executive = { workspace = true }
sp-api = { workspace = true }
sp-arithmetic = { workspace = true }
sp-block-builder = { workspace = true }
sp-debug-derive = { workspace = true }
sp-core = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-consensus-grandpa = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
frame-metadata-hash-extension = { workspace = true }

# Used for runtime benchmarking
frame-benchmarking = { workspace = true, optional = true }
frame-system-benchmarking = { workspace = true, optional = true }

# Local Dependencies
pallet-bitcoin-utxos = { workspace = true }
pallet-block-seal = { workspace = true }
pallet-block-seal-spec = { workspace = true }
pallet-block-rewards = { workspace = true }
pallet-bond = { workspace = true }
pallet-chain-transfer = { workspace = true }
pallet-data-domain = { workspace = true }
pallet-notebook = { workspace = true }
pallet-notaries = { workspace = true }
pallet-mining-slot = { workspace = true }
pallet-price-index = { workspace = true }
pallet-ticks = { workspace = true }
pallet-mint = { workspace = true }
pallet-vaults = { workspace = true }
argon-primitives = { workspace = true }


[build-dependencies]
substrate-wasm-builder = { workspace = true, optional = true }

[features]
default = [ "std" ]
std = [
	"argon-primitives/std",
	"codec/std",
	"frame-benchmarking?/std",
	"frame-executive/std",
	"frame-metadata-hash-extension/std",
	"frame-support/std",
	"frame-system-benchmarking?/std",
	"frame-system-rpc-runtime-api/std",
	"frame-system/std",
	"frame-try-runtime?/std",
	"log/std",
	"pallet-authorship/std",
	"pallet-balances/std",
	"pallet-bitcoin-utxos/std",
	"pallet-block-rewards/std",
	"pallet-block-seal-spec/std",
	"pallet-block-seal/std",
	"pallet-bond/std",
	"pallet-chain-transfer/std",
	"pallet-data-domain/std",
	"pallet-grandpa/std",
	"pallet-mining-slot/std",
	"pallet-mint/std",
	"pallet-multisig/std",
	"pallet-notaries/std",
	"pallet-notebook/std",
	"pallet-offences/std",
	"pallet-price-index/std",
	"pallet-proxy/std",
	"pallet-session/std",
	"pallet-sudo/std",
	"pallet-ticks/std",
	"pallet-timestamp/std",
	"pallet-transaction-payment-rpc-runtime-api/std",
	"pallet-transaction-payment/std",
	"pallet-tx-pause/std",
	"pallet-vaults/std",
	"scale-info/std",
	"serde_json/std",
	"sp-api/std",
	"sp-arithmetic/std",
	"sp-block-builder/std",
	"sp-consensus-grandpa/std",
	"sp-core/std",
	"sp-debug-derive/force-debug",
	"sp-debug-derive/std",
	"sp-genesis-builder/std",
	"sp-inherents/std",
	"sp-offchain/std",
	"sp-runtime/std",
	"sp-session/std",
	"sp-transaction-pool/std",
	"sp-version/std",
	"substrate-wasm-builder",
]
runtime-benchmarks = [
	"frame-benchmarking/runtime-benchmarks",
	"frame-support/runtime-benchmarks",
	"frame-system-benchmarking/runtime-benchmarks",
	"frame-system/runtime-benchmarks",
	"pallet-balances/runtime-benchmarks",
	"pallet-bitcoin-utxos/runtime-benchmarks",
	"pallet-block-rewards/runtime-benchmarks",
	"pallet-block-seal-spec/runtime-benchmarks",
	"pallet-block-seal/runtime-benchmarks",
	"pallet-bond/runtime-benchmarks",
	"pallet-chain-transfer/runtime-benchmarks",
	"pallet-data-domain/runtime-benchmarks",
	"pallet-grandpa/runtime-benchmarks",
	"pallet-mining-slot/runtime-benchmarks",
	"pallet-mint/runtime-benchmarks",
	"pallet-multisig/runtime-benchmarks",
	"pallet-notaries/runtime-benchmarks",
	"pallet-notebook/runtime-benchmarks",
	"pallet-offences/runtime-benchmarks",
	"pallet-price-index/runtime-benchmarks",
	"pallet-proxy/runtime-benchmarks",
	"pallet-sudo/runtime-benchmarks",
	"pallet-ticks/runtime-benchmarks",
	"pallet-timestamp/runtime-benchmarks",
	"pallet-tx-pause/runtime-benchmarks",
	"pallet-vaults/runtime-benchmarks",
	"sp-runtime/runtime-benchmarks",
]
try-runtime = [
	"frame-executive/try-runtime",
	"frame-support/try-runtime",
	"frame-system/try-runtime",
	"frame-try-runtime/try-runtime",
	"pallet-authorship/try-runtime",
	"pallet-balances/try-runtime",
	"pallet-bitcoin-utxos/try-runtime",
	"pallet-block-rewards/try-runtime",
	"pallet-block-seal-spec/try-runtime",
	"pallet-block-seal/try-runtime",
	"pallet-bond/try-runtime",
	"pallet-chain-transfer/try-runtime",
	"pallet-data-domain/try-runtime",
	"pallet-grandpa/try-runtime",
	"pallet-mining-slot/try-runtime",
	"pallet-mint/try-runtime",
	"pallet-multisig/try-runtime",
	"pallet-notaries/try-runtime",
	"pallet-notebook/try-runtime",
	"pallet-offences/try-runtime",
	"pallet-price-index/try-runtime",
	"pallet-proxy/try-runtime",
	"pallet-session/try-runtime",
	"pallet-sudo/try-runtime",
	"pallet-ticks/try-runtime",
	"pallet-timestamp/try-runtime",
	"pallet-transaction-payment/try-runtime",
	"pallet-tx-pause/try-runtime",
	"pallet-vaults/try-runtime",
	"sp-runtime/try-runtime",
]

# Enable the metadata hash generation.
#
# This is hidden behind a feature because it increases the compile time.
# The wasm binary needs to be compiled twice, once to fetch the metadata,
# generate the metadata hash and then a second time with the
# `RUNTIME_METADATA_HASH` environment variable set for the `CheckMetadataHash`
# extension.
metadata-hash = [ "substrate-wasm-builder/metadata-hash" ]
