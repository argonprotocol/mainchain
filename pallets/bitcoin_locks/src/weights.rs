//! Autogenerated weights for pallet_bitcoin_locks
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI
//! DATE: 2025-06-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// cargo run --package argon-node --features runtime-benchmarks -- benchmark pallet --pallet pallet_bitcoin_locks --extrinsic "*" --steps 50 --repeat 20

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use pallet_prelude::*;

/// Weight functions needed for pallet_bitcoin_locks.
pub trait WeightInfo {
	// Core extrinsics
	fn initialize() -> Weight;
	fn request_release() -> Weight;
	fn cosign_release() -> Weight;  // CRITICAL: Was missing - complex signature verification + cross-pallet ops
	fn ratchet() -> Weight;

	// Hooks with variance
	fn on_initialize_with_expirations_and_overdue(expiring_count: u32, overdue_count: u32) -> Weight;

	// Admin function
	fn admin_modify_minimum_locked_sats() -> Weight;
}


/// Placeholder implementation for tests and no-std environments
pub struct SubstrateWeight<T>(PhantomData<T>);

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn initialize() -> Weight { Weight::zero() }
	fn request_release() -> Weight { Weight::zero() }
	fn cosign_release() -> Weight { Weight::zero() }
	fn ratchet() -> Weight { Weight::zero() }
	fn on_initialize_with_expirations_and_overdue(_expiring_count: u32, _overdue_count: u32) -> Weight { Weight::zero() }
	fn admin_modify_minimum_locked_sats() -> Weight { Weight::zero() }
}
