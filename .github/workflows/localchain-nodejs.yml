name: Localchain Bindings
permissions:
  contents: write
  id-token: write
'on':
  push:
    tags:
      - v[0-9]+.*
  workflow_dispatch: null
  # note: temporary, remove when this is stable
#  pull_request: null

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  localchain:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            build: |
              export RUSTFLAGS="-C link-args=-Wl,-undefined,dynamic_lookup"
              yarn build:debug
              strip -x *.node
          - os: macos-latest
            target: aarch64-apple-darwin
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export RUSTFLAGS="-C link-args=-Wl,-undefined,dynamic_lookup"
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              yarn build:debug --target aarch64-apple-darwin
              strip -x *.node
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              export DEBUG=napi:*
              cd localchain
              yarn build:debug -- --lib
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              cd localchain
              yarn build:debug --target aarch64-unknown-linux-gnu -- --lib
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              yarn build --target x86_64-pc-windows-msvc
              strip -x *.node
    name: localchain - ${{ matrix.target }} - node@20
    runs-on: ${{matrix.os}}
    env:
      DEBUG: napi:*
      APP_NAME: localchain
      MACOSX_DEPLOYMENT_TARGET: '10.13'
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        if: ${{ !matrix.settings.docker }}
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: localchain-${{ matrix.target }}-cargo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: yarn install

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.docker }}
        with:
          image: ${{ matrix.docker }}
          options: |
            --user 0:0 
            -e SQLX_OFFLINE=true 
            -e SKIP_WASM_BUILD=1 
            -e GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
            -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db 
            -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache 
            -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index 
            -v ${{ github.workspace }}:/build 
            -w /build
          run: ${{ matrix.build }}

      - name: Build
        if: ${{ !matrix.docker }}
        run: ${{ matrix.build }}
        shell: bash
        working-directory: ./localchain
        env:
          SQLX_OFFLINE: true
          SKIP_WASM_BUILD: 1
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Localchain artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: localchain/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-binding:
    name: Test bindings on ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - localchain
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
        node:
          - '18'
          - '20'

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install dependencies
        run: yarn install
      - name: Find Host IP and Modify Hosts (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          echo "127.0.0.1 host.docker.internal" | sudo tee -a /etc/hosts
          HOST_IP=$(ip -4 route show default | cut -d" " -f3)
          echo "HOST_IP=$HOST_IP" >> $GITHUB_ENV

      - name: Find Host IP and Modify Hosts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Add-Content -Path C:\Windows\System32\drivers\etc\hosts -Value "127.0.0.1 host.docker.internal"
          $ip = (Get-NetIPConfiguration | Where-Object { $_.IPv4DefaultGateway -ne $null -and $_.NetAdapter.Status -ne "Disconnected" }).IPv4Address.IPAddress
          echo "HOST_IP=$ip" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Miner
        run: docker pull ghcr.io/ulixee/ulixee-miner:edge && docker pull ghcr.io/ulixee/ulixee-notary:edge

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: localchain

      - name: List packages
        run: ls -R .
        shell: bash
        working-directory: ./localchain

      - name: Test bindings
        run: yarn test:js-only
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_HOST_IP: ${{ env.HOST_IP }}
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-binding
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: localchain/artifacts
      - name: Move artifacts
        run: yarn artifacts
        working-directory: ./localchain

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: napi-bindings
          commit_message: Check-in binding files
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
          file_pattern: ./localchain/npm/**/*.node
          create_branch: true
          push_options: '--force-with-lease'

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          force_with_lease: true
      - name: List packages
        run: ls -R ./npm
        shell: bash
        working-directory: ./localchain
      - name: Publish
        working-directory: ./localchain
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --tag next --access public
          else
          echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}