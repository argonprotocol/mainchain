name: Create Release Assets

permissions:
  contents: read

on:
  push:
    branches:
      - v[0-9]+.*

env:
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

defaults:
  run:
    shell: bash

jobs:
  create-release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Check if release exists (including drafts)
        id: check_release
        run: |
          RELEASE_EXISTS=$(gh release list --json tagName --jq ".[] | select(.tagName==\"${{ github.ref_name }}\") | .tagName" | head -n 1)
          if [[ -n "$RELEASE_EXISTS" ]]; then
           echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract changelog for the current version
        id: extract_changelog
        run: |
          # Extract changelog section for the specified version
          sed "/^## \[${{ github.ref_name }}\]/,/^### \[v/p" CHANGELOG.md | sed '$d' > changelog.txt
          cat changelog.txt  # Print the extracted changelog

      - name: Create draft release if not exists
        if: env.RELEASE_EXISTS == 'false'
        run: gh release create ${{ github.ref_name }} --draft --title "${{ github.ref_name }}" --notes-file changelog.txt --target ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-assets:
    name: ${{ matrix.target }}
    needs:
      - create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            bins: argon-node,argon-notary,argon-localchain,argon-bitcoin-cli,argon-oracle
          - target: x86_64-unknown-linux-gnu
            bins: argon-node,argon-notary,argon-localchain,argon-bitcoin-cli,argon-oracle
          - target: aarch64-apple-darwin
            os: macos-latest
            bins: argon-node,argon-notary,argon-localchain,argon-bitcoin-cli,argon-oracle
          - target: x86_64-apple-darwin
            os: macos-latest
            bins: argon-node,argon-notary,argon-localchain,argon-bitcoin-cli,argon-oracle
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os || 'ubuntu-22.04' }}
    timeout-minutes: 90
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install linux dependencies
        if: (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
        run: |
          sudo apt-get install -y clang libssl-dev llvm libudev-dev protobuf-compiler pkg-config

      - name: Install mac dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install protobuf llvm
          # need to use more modern llvm than what is on mac to build secp256k1 for wasm
          echo "LDFLAGS=-L/opt/homebrew/opt/llvm/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/opt/llvm/include" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C linker=/opt/homebrew/opt/llvm/bin/clang" >> $GITHUB_ENV
          echo "CC=/opt/homebrew/opt/llvm/bin/clang" >> $GITHUB_ENV
          echo "CXX=/opt/homebrew/opt/llvm/bin/clang++" >> $GITHUB_ENV

      - uses: rui314/setup-mold@v1

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: wasm32-unknown-unknown
          components: rust-src

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}

      - uses: taiki-e/upload-rust-binary-action@v1
        if: (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
        with:
          bin: argon-node
          features: metadata-hash
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ github.ref_name }}

      - uses: taiki-e/upload-rust-binary-action@v1
        if: (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
        with:
          bin: argon-notary
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ github.ref_name }}

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: argon-localchain
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ github.ref_name }}

      - uses: taiki-e/upload-rust-binary-action@v1
        if: (matrix.target == 'x86_64-unknown-linux-gnu')
        with:
          bin: argon-oracle
          # TODO: deactivate building in this feature when we have price liquidity
          features: simulated-prices
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ github.ref_name }}

      - uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: argon-bitcoin-cli
          target: ${{ matrix.target }}
          archive: $bin-$tag-$target
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ github.ref_name }}
