{{header}}
//! Autogenerated weights for `{{pallet}}`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION {{version}}
//! DATE: {{date}}, STEPS: `{{cmd.steps}}`, REPEAT: `{{cmd.repeat}}`, LOW RANGE: `{{cmd.lowest_range_values}}`, HIGH RANGE: `{{cmd.highest_range_values}}`
//! WORST CASE MAP SIZE: `{{cmd.worst_case_map_values}}`
//! HOSTNAME: `{{hostname}}`, CPU: `{{cpuname}}`
//! WASM-EXECUTION: `{{cmd.wasm_execution}}`, CHAIN: `{{cmd.chain}}`, DB CACHE: {{cmd.db_cache}}

// Executed Command:
{{#each cmd.args as |arg|}}
// {{arg}}
{{/each}}

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![cfg_attr(not(feature = "runtime-benchmarks"), allow(unused_variables))]

use frame_support::{traits::Get, weights::Weight};
use polkadot_sdk::*;
use core::marker::PhantomData;

/// Weight functions for `{{pallet}}`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> {{pallet}}::WeightInfo for WeightInfo<T> {
	{{#each benchmarks as |benchmark|}}
	{{#each benchmark.comments as |comment|}}
	/// {{comment}}
	{{/each}}
	{{#if (or benchmark.base_weight benchmark.component_weight)}}
	{{#if benchmark.component_ranges}}
	/// The range of component `{{benchmark.component_ranges}}` is `{{benchmark.component_ranges}}`.
	{{/if}}
	{{/if}}
	fn {{benchmark.name~}}
	(
		{{~#each benchmark.components as |c| ~}}
		{{c.name}}: u32, {{/each~}}
	) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `{{benchmark.base_reads_db}} + {{benchmark.component_reads_db}} * {{benchmark.component_name}}`
		//  Estimated: `{{benchmark.base_writes_db}} + {{benchmark.component_writes_db}} * {{benchmark.component_name}}`
		// Minimum execution time: {{benchmark.min_execution_time}}_000 picoseconds.
		Weight::from_parts({{benchmark.base_weight}}, {{#if benchmark.base_reads_db}}{{benchmark.base_reads_db}}{{else}}0{{/if}})
			{{#each benchmark.component_weight as |cw|}}
			// Standard Error: {{cw.slope_error}}
			.saturating_add(Weight::from_parts({{cw.slope}}, 0).saturating_mul({{cw.name}}.into()))
			{{/each}}
			{{#if benchmark.base_reads_db}}
			.saturating_add(T::DbWeight::get().reads({{benchmark.base_reads_db}}))
			{{/if}}
			{{#each benchmark.component_reads_db as |cr|}}
			.saturating_add(T::DbWeight::get().reads(({{cr.slope}}_u64).saturating_mul({{cr.name}}.into())))
			{{/each}}
			{{#if benchmark.base_writes_db}}
			.saturating_add(T::DbWeight::get().writes({{benchmark.base_writes_db}}))
			{{/if}}
			{{#each benchmark.component_writes_db as |cw|}}
			.saturating_add(T::DbWeight::get().writes(({{cw.slope}}_u64).saturating_mul({{cw.name}}.into())))
			{{/each}}
	}
	{{/each}}
}
