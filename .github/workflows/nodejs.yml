name: Build + Test Node.js Apis
'on':
  push:
    branches:
      - main
      - v[0-9]+.*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read
  actions: write

env:
  RUST_BACKTRACE: 1
  RUSTUP_MAX_RETRIES: 10
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:
  localchain:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            prebuild: |
              export RUSTFLAGS="-C link-args=-Wl,-undefined,dynamic_lookup"
          - os: macos-latest
            target: aarch64-apple-darwin
            prebuild: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export RUSTFLAGS="-C link-args=-Wl,-undefined,dynamic_lookup"
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
    name: localchain - ${{ matrix.target }} - node@20
    runs-on: ${{matrix.os}}
    env:
      DEBUG: napi:*
      MACOSX_DEPLOYMENT_TARGET: '14.0'
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Install
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: 'false'
          target: ${{ matrix.target }}

      - uses: ./.github/templates/rust-cache
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: localchain-${{ matrix.target }}-cargo

      - name: Install dependencies
        run: yarn install

      - name: Set HOME_DIR for Linux builds
        if: startsWith(matrix.os, 'ubuntu')
        run: echo "TARGET_BASEDIR=/mnt" >> "$GITHUB_ENV"

      - name: Set HOME_DIR for Mac builds
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: echo "TARGET_BASEDIR=${{ github.workspace }}" >> "$GITHUB_ENV"
        shell: bash

      - name: Set HOME_DIR
        run: echo "HOME_DIR=$HOME" >> $GITHUB_ENV
        shell: bash

      - name: Prebuild
        if: ${{ matrix.prebuild }}
        run: ${{ matrix.prebuild }}
        shell: bash

      - name: Build Localchain
        run: |
          yarn build:debug --target ${{ matrix.target }} -- --lib
          strip -x *.node
        shell: bash
        working-directory: ./localchain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SKIP_WASM_BUILD: 1

      - name: Upload Localchain artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: localchain/localchain.*.node
          if-no-files-found: error

      - name: Build Client
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: yarn build
        shell: bash
        working-directory: ./client/nodejs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Bitcoin
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: yarn build
        shell: bash
        working-directory: ./bitcoin/nodejs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Bitcoin artifact
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        uses: actions/upload-artifact@v4
        with:
          name: bitcoin-wasm
          path: bitcoin/nodejs/ts/wasm/*
          if-no-files-found: error
  test-mac-win:
    name: Test bindings on ${{ matrix.target }} - node@${{ matrix.node }}
    needs: [ localchain ]
    strategy:
      fail-fast: false
      matrix:
        node: [ 20, 22 ]
        os: [ macos-latest, windows-latest ]
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install dependencies
        run: yarn

      - name: Download localchain artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: localchain
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download bitcoin artifacts
        uses: actions/download-artifact@v4
        with:
          name: bitcoin-wasm
          path: bitcoin/nodejs/ts/wasm
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build typescript
        run: yarn tsc

      - name: Test bindings
        run: yarn test:ci
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SKIP_E2E: true
          SKIP_WASM_BUILD: 1
  test-linux:
    name: Test bindings on ${{ matrix.target }} - node@${{ matrix.node }}
    needs: [ localchain ]
    strategy:
      fail-fast: false
      matrix:
        node: [ 20, 22 ]
        os: [ ubuntu-latest, ubuntu-22.04-arm ]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/checkout@v4
      - name: Free Disk Space
        uses: ./.github/templates/clear-space

      - name: Install linux dependencies
        run: sudo apt-get update && sudo apt-get install -y clang libssl-dev llvm libudev-dev protobuf-compiler pkg-config

      - uses: ./.github/templates/rust-cache
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: cargo-${{ env.TARGET }}

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: 'false'

      - name: Build
        run: cargo build
        env:
          CARGO_INCREMENTAL: 0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List assets
        run: ls -lart target/

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn

      - name: Install dependencies
        run: yarn

      - name: Download localchain bindings
        uses: actions/download-artifact@v4
        with:
          path: localchain
          name: bindings-${{ matrix.target }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download localchain artifacts
        uses: actions/download-artifact@v4
        with:
          name: bitcoin-wasm
          path: bitcoin/nodejs/ts/wasm
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build typescript
        run: yarn tsc

      - name: Run MinIO container
        run: |
          mkdir -p /tmp/minio-data
          docker run -d \
            -e MINIO_ACCESS_KEY=minioadmin \
            -e MINIO_SECRET_KEY=minioadmin \
            -v /tmp/minio-data:/data \
            -p 9000:9000 \
            --name minio \
            minio/minio server /data

      - name: Wait for MinIO to start
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:9000/minio/health/live; then
              echo "MinIO is up"
              break
            fi
            echo "Waiting for MinIO to start..."
            sleep 2
          done

      - name: Test bindings
        run: yarn test:ci
        working-directory: ./localchain
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_S3_ENDPOINT: http://localhost:9000
          RUSTFLAGS: "-C link-args=-Wl,--warn-unresolved-symbols"
          RUST_LOG: debug,sqlx=info
          SKIP_WASM_BUILD: 1

      - name: Test bitcoin
        run: yarn test:ci
        working-directory: ./bitcoin/nodejs
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: 'false'
          target: ${{ matrix.target }}

      - name: Test client
        run: yarn test:ci
        working-directory: ./client/nodejs
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_S3_ENDPOINT: http://localhost:9000

      - name: Cleanup minio
        if: always()
        run: |
          docker stop minio
          docker rm minio
  upload-assets:
    name: Upload assets
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs:
      - test-linux
      - test-mac-win
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn install

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: localchain/artifacts
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download bitcoin artifacts
        uses: actions/download-artifact@v4
        with:
          name: bitcoin-wasm
          path: bitcoin/nodejs/ts/wasm
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build client
        run: yarn tsc

      - name: Move artifacts
        run: yarn artifacts
        working-directory: ./localchain

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: napi-bindings
          commit_message: Check-in binding files
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@users.noreply.github.com
          file_pattern: ./localchain/npm/**/*.node,./bitcoin/nodejs/ts/wasm/*
          create_branch: true
          push_options: '--force-with-lease'

      - name: List packages
        run: ls -R ./npm
        shell: bash
        working-directory: ./localchain

      - name: Upload artifacts to release
        if: github.ref_name != 'main'
        run: |
          tar -czf bitcoin-wasm.tar.gz -C bitcoin/nodejs/ts/wasm .
          RELEASE_EXISTS=$(gh release list --json tagName,isDraft --jq ".[] | select(.tagName==\"${{ github.ref_name }}\" and .isDraft == true) | .tagName" | head -n 1)
          if [[ -n "$RELEASE_EXISTS" ]]; then
            gh release upload ${{ github.ref_name }} \
              ./localchain/npm/**/*.node \
              bitcoin-wasm.tar.gz \
              --clobber
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
