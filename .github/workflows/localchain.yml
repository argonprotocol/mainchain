name: Localchain Napi.rs
env:
  DEBUG: napi:*
  APP_NAME: localchain
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: aarch64-linux-gnu-gcc
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null


jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          #          - os: macos-latest
          #            target: x86_64-apple-darwin
          #            build: yarn build
          #          - os: windows-latest
          #            build: yarn build
          #            target: x86_64-pc-windows-msvc
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            #            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              OPENSSL_LIB_DIR=/usr/lib OPENSSL_INCLUDE_DIR=/usr/include PKG_CONFIG_PATH=/usr/lib/pkgconfig yarn workspace @ulixee/localchain build --target x86_64-unknown-linux-gnu --use-napi-cross
            sqlx_offline: false
    #          - os: macos-latest
    #            target: aarch64-apple-darwin
    #            build: yarn build --target aarch64-apple-darwin


    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    name: stable - ${{ matrix.target }} - node@20
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn

      - name: Set Localchain Db Url
        working-directory: localchain
        run: echo "DATABASE_URL=sqlite://${{ runner.temp }}/temp.db" > .env

      - name: Set Notary Db Url
        working-directory: notary
        run: |
          echo "DATABASE_URL=postgres://postgres:postgres@postgres/notary" > .env

      - name: Install linux dependencies
        if: (matrix.os == '' || startsWith(matrix.os, 'ubuntu'))
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y protobuf-compiler libssl-dev pkg-config openssl

      - name: Install mac dependencies
        if: startsWith(matrix.os, 'macos')
        run: brew install protobuf

      - name: Install dependencies
        run: yarn install

      - uses: moonrepo/setup-rust@v1
        with:
          targets: ${{ matrix.target }},wasm32-unknown-unknown
        env:
          SQLX_OFFLINE: ${{ matrix.sqlx_offline || 'true' }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.docker }}
        with:
          image: ${{ matrix.docker }}
          options: '--user 0:0 -e SQLX_OFFLINE=true -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.build }}

      - name: Build
        if: ${{ !matrix.docker }}
        run: ${{ matrix.build }}
        shell: bash
        working-directory: ./localchain
        env:
          SQLX_OFFLINE: ${{ matrix.sqlx_offline || 'true' }}

      - name: Test
        run: cargo test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: localchain/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.target }}
          path: target/build/ulx-*
          if-no-files-found: error

  test-binding:
    name: Test bindings on ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        include:
          #          - os: macos-latest
          #            target: x86_64-apple-darwin
          #          - os: windows-latest
          #            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
        node:
          - '18'
          - '20'

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: localchain
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bins-${{ matrix.target }}
          path: target/build
      - name: List packages
        run: ls -R .
        shell: bash
        working-directory: ./localchain

      - name: Test bindings In Docker
        if: ${{ matrix.docker }}
        run: docker run --rm -v $(pwd):/build -e NOTARY_DB_URL=postgres://postgres:postgres@postgres -w /build node:${{ matrix.node }}-slim yarn test

      - name: Test bindings
        if: ${{ !matrix.docker }}
        run: yarn test
        env:
          NOTARY_DB_URL: postgres://postgres:postgres@postgres
  universal-macOS:
    name: Build universal macOS binary
    needs:
      - build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download macOS x64 artifact
        uses: actions/download-artifact@v4
        with:
          name: bindings-x86_64-apple-darwin
          path: localchain/artifacts
      - name: Combine binaries
        run: yarn universal
        working-directory: ./localchain
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-universal-apple-darwin
          path: localchain/${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-binding
      - universal-macOS
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: localchain/artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --tag next --access public
          else
          echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
