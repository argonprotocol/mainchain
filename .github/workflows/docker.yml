name: Build Edge Docker Images
'on':
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: read
  actions: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    name: Build All ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Free Disk Space
        if: ${{startsWith(matrix.os, 'ubuntu')}}
        uses: ./.github/templates/clear-space

      - name: Install linux dependencies
        if: ${{startsWith(matrix.os, 'ubuntu')}}
        run: sudo apt-get update && sudo apt-get install -y clang libssl-dev llvm libudev-dev protobuf-compiler pkg-config

      - name: Install mac dependencies
        if: startsWith(matrix.os, 'macos')
        run: brew install protobuf

      - uses: ./.github/templates/rust-cache
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          name: cargo-${{ matrix.target }}

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          cache: 'false'
          target: ${{ matrix.target }}

      - name: Install sqlx-cli
        uses: taiki-e/install-action@v2
        with:
          tool: sqlx-cli@0.8.5

      - name: Migrate Notary Db
        working-directory: notary
        run: cargo sqlx database setup

      - name: Create and Set Database URL
        working-directory: localchain
        run: |
          touch ${{ runner.temp }}/temp.db
          chmod 777 ${{ runner.temp }}/temp.db
          echo "DATABASE_URL=sqlite://${{ runner.temp }}/temp.db" > .env
          cat .env

      - name: Migrate Localchain Db
        working-directory: localchain
        run: cargo sqlx database setup

      - name: Build
        run: cargo build --target=${{ matrix.target }}
        env:
          CARGO_INCREMENTAL: 0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUST_LOG: info

      - name: List assets
        run: ls -lart target/

      - name: Upload Debug Assets
        uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.target }}
          path: target/${{ matrix.target }}/debug/argon-*
          if-no-files-found: error

  docker:
    name: Docker
    needs:
      - build
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bins-x86_64-unknown-linux-gnu
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: ./amd64

      - name: Download amd artifacts
        uses: actions/download-artifact@v4
        with:
          name: bins-aarch64-unknown-linux-gnu
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path: ./arm64

      - name: List assets in root
        run: ls
        shell: bash

      - name: Argon Node
        uses: ./.github/templates/docker
        with:
          image: ghcr.io/argonprotocol/argon-miner
          bin: argon-node
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Notary
        uses: ./.github/templates/docker
        with:
          image: ghcr.io/argonprotocol/argon-notary
          bin: argon-notary
          github-token: ${{ secrets.GITHUB_TOKEN }}
